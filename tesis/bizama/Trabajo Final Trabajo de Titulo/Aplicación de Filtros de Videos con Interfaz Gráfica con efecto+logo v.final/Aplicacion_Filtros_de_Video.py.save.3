#!/usr/bin/env python

# Importamos os, que engloba funcionalidad relativa al sistema operativo;
# Tambien usamos sys para ofrecer una funcionalidad relacionada con el propio intérprete de Python
import sys, os

# Importamos el modulo pygtk y le indicamos que use la version mas reciente instalada en el sistema
# (en caso de que existan varias versiones de pygtk instaladas en el sistema)
import pygtk

# Luego importamos el módulo de gtk para poder acceder a los controles de Gtk+
# Ademas gobject se debe usar ya que es una parte fundamental para Gstreamer 
# ya que se encarga de crear un ciclo o bucle en el que gst habita y hace su trabajo.
import gtk, gobject

# Se importa gst y pygst en la version 0.10 para cargarlos.
import pygst 
pygst.require("0.10")
import gst

# Creamos una clase que contenga la ventana principal del programa y los
# métodos de cada una las señales
class GTK_Main:
	
	# Primero definimos como sera la ventana:
	def __init__(self):
# Creamos una ventana toplevel (o sea que esta al frente de todas las
        # ventanas) llamada "main_win" y fijamos su titulo como "Ejemplo 1"	
	ventana = gtk.Window(gtk.WINDOW_TOPLEVEL)
		ventana.set_title("Filtros de Video en Tiempo Real by Anibal Bizama")
		ventana.set_default_size(450, 200)
		ventana.connect("destroy", gtk.main_quit, "WM destroy")
		vbox = gtk.VBox()
		ventana.add(vbox)
		self.video_ventana = gtk.DrawingArea()
		vbox.add(self.video_ventana)
		hbox = gtk.HBox()
		vbox.pack_start(hbox, False)
		hbox.set_border_width(10)
		hbox.pack_start(gtk.Label())
		self.boton1 = gtk.Button("Enviar Webcam a Dispositivo Virtual")
		self.boton1.connect("clicked", self.start_stop)
		hbox.pack_start(self.boton1, False)
		self.boton2 = gtk.Button("Salir")
		self.boton2.connect("clicked", self.exit)
		hbox.pack_start(self.boton2, False)
		hbox.add(gtk.Label())
		ventana.show_all()

		# Set up the gstreamer pipeline
		self.player = gst.parse_launch ("v4l2src device=/dev/video1 !     alpha method=0 alpha=1 !     mezclador.   multifilesrc location=logouct1.png caps=image/png,framerate=1/1 !     pngdec !     videobox border-alpha=0 alpha=.6 top=-380 left=-470 !     mezclador.   videomixer name=mezclador !     videorate !     ffmpegcolorspace !     video/x-raw-yuv !     v4l2sink device=/dev/video0 sync=false")                
		
		# bus = self.player.get_bus()
		# bus.add_signal_watch()
		# bus.enable_sync_message_emission()
		# bus.connect("message", self.on_message)
		# bus.connect("sync-message::element", self.on_sync_message)

	def start_stop(self, w):
		if self.boton1.get_label() == "Enviar Webcam a Dispositivo Virtual":
			self.boton1.set_label("Parar")
			self.player.set_state(gst.STATE_PLAYING)
		
		else:
			self.player.set_state(gst.STATE_NULL)
			self.boton1.set_label("Enviar Webcam a Dispositivo Virtual")


	def exit(self, widget, data=None):
		gtk.main_quit()

	def on_message(self, bus, message):
		t = message.type
		if t == gst.MESSAGE_EOS:
			self.player.set_state(gst.STATE_NULL)
			self.button.set_label("Enviar Webcam a Dispositivo Virtual")
		elif t == gst.MESSAGE_ERROR:
			err, debug = message.parse_error()
			print "Error: %s" % err, debug
			self.player.set_state(gst.STATE_NULL)
			self.boton1.set_label("Enviar Webcam a Dispositivo Virtual")

	def on_sync_message(self, bus, message):
		if message.structure is None:
			return
		message_name = message.structure.get_name()
		if message_name == "prepare-xwindow-id":
			# Assign the viewport
			imagesink = message.src
			imagesink.set_property("force-aspect-ratio", True)
			imagesink.set_xwindow_id(self.video_ventana.window.xid)


GTK_Main()
gtk.gdk.threads_init()
gtk.main()


